// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StateValue int32

const (
	StateValue_Undefined   StateValue = 0
	StateValue_Activated   StateValue = 1
	StateValue_Deactivated StateValue = 2
)

var StateValue_name = map[int32]string{
	0: "Undefined",
	1: "Activated",
	2: "Deactivated",
}
var StateValue_value = map[string]int32{
	"Undefined":   0,
	"Activated":   1,
	"Deactivated": 2,
}

func (x StateValue) String() string {
	return proto.EnumName(StateValue_name, int32(x))
}
func (StateValue) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type EventActorType int32

const (
	EventActorType_node    EventActorType = 0
	EventActorType_service EventActorType = 1
	EventActorType_state   EventActorType = 2
)

var EventActorType_name = map[int32]string{
	0: "node",
	1: "service",
	2: "state",
}
var EventActorType_value = map[string]int32{
	"node":    0,
	"service": 1,
	"state":   2,
}

func (x EventActorType) String() string {
	return proto.EnumName(EventActorType_name, int32(x))
}
func (EventActorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type EventAction int32

const (
	EventAction_created EventAction = 0
	EventAction_updated EventAction = 1
	EventAction_deleted EventAction = 2
)

var EventAction_name = map[int32]string{
	0: "created",
	1: "updated",
	2: "deleted",
}
var EventAction_value = map[string]int32{
	"created": 0,
	"updated": 1,
	"deleted": 2,
}

func (x EventAction) String() string {
	return proto.EnumName(EventAction_name, int32(x))
}
func (EventAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type EventFilterKey int32

const (
	EventFilterKey_Action    EventFilterKey = 0
	EventFilterKey_ActorType EventFilterKey = 1
	EventFilterKey_ActorID   EventFilterKey = 2
	EventFilterKey_NodeID    EventFilterKey = 3
	EventFilterKey_ServiceID EventFilterKey = 4
)

var EventFilterKey_name = map[int32]string{
	0: "Action",
	1: "ActorType",
	2: "ActorID",
	3: "NodeID",
	4: "ServiceID",
}
var EventFilterKey_value = map[string]int32{
	"Action":    0,
	"ActorType": 1,
	"ActorID":   2,
	"NodeID":    3,
	"ServiceID": 4,
}

func (x EventFilterKey) String() string {
	return proto.EnumName(EventFilterKey_name, int32(x))
}
func (EventFilterKey) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type Filters struct {
	// Key value is from the FilterKey enum.
	Args map[int32]string `protobuf:"bytes,1,rep,name=Args,json=args" json:"Args,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Filters) GetArgs() map[int32]string {
	if m != nil {
		return m.Args
	}
	return nil
}

type Node struct {
	// TODO: rename fields with plugin
	ID string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Node) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Service struct {
	ID   string `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Service) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type State struct {
	Value   StateValue `protobuf:"varint,1,opt,name=Value,json=value,enum=api.StateValue" json:"Value,omitempty"`
	Until   int64      `protobuf:"varint,2,opt,name=Until,json=until" json:"Until,omitempty"`
	Service *Service   `protobuf:"bytes,3,opt,name=Service,json=service" json:"Service,omitempty"`
	Node    *Node      `protobuf:"bytes,4,opt,name=Node,json=node" json:"Node,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *State) GetValue() StateValue {
	if m != nil {
		return m.Value
	}
	return StateValue_Undefined
}

func (m *State) GetUntil() int64 {
	if m != nil {
		return m.Until
	}
	return 0
}

func (m *State) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *State) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type Event struct {
	ID        string         `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Action    EventAction    `protobuf:"varint,2,opt,name=Action,json=action,enum=api.EventAction" json:"Action,omitempty"`
	ActorID   string         `protobuf:"bytes,3,opt,name=ActorID,json=actorID" json:"ActorID,omitempty"`
	ActorType EventActorType `protobuf:"varint,4,opt,name=ActorType,json=actorType,enum=api.EventActorType" json:"ActorType,omitempty"`
	// Types that are valid to be assigned to Actor:
	//	*Event_Node
	//	*Event_Service
	//	*Event_State
	Actor isEvent_Actor `protobuf_oneof:"Actor"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type isEvent_Actor interface {
	isEvent_Actor()
}

type Event_Node struct {
	Node *Node `protobuf:"bytes,5,opt,name=Node,json=node,oneof"`
}
type Event_Service struct {
	Service *Service `protobuf:"bytes,6,opt,name=Service,json=service,oneof"`
}
type Event_State struct {
	State *State `protobuf:"bytes,7,opt,name=State,json=state,oneof"`
}

func (*Event_Node) isEvent_Actor()    {}
func (*Event_Service) isEvent_Actor() {}
func (*Event_State) isEvent_Actor()   {}

func (m *Event) GetActor() isEvent_Actor {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *Event) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Event) GetAction() EventAction {
	if m != nil {
		return m.Action
	}
	return EventAction_created
}

func (m *Event) GetActorID() string {
	if m != nil {
		return m.ActorID
	}
	return ""
}

func (m *Event) GetActorType() EventActorType {
	if m != nil {
		return m.ActorType
	}
	return EventActorType_node
}

func (m *Event) GetNode() *Node {
	if x, ok := m.GetActor().(*Event_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Event) GetService() *Service {
	if x, ok := m.GetActor().(*Event_Service); ok {
		return x.Service
	}
	return nil
}

func (m *Event) GetState() *State {
	if x, ok := m.GetActor().(*Event_State); ok {
		return x.State
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Node)(nil),
		(*Event_Service)(nil),
		(*Event_State)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Actor
	switch x := m.Actor.(type) {
	case *Event_Node:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *Event_Service:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Service); err != nil {
			return err
		}
	case *Event_State:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.State); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Actor has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 5: // Actor.Node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Actor = &Event_Node{msg}
		return true, err
	case 6: // Actor.Service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Service)
		err := b.DecodeMessage(msg)
		m.Actor = &Event_Service{msg}
		return true, err
	case 7: // Actor.State
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(State)
		err := b.DecodeMessage(msg)
		m.Actor = &Event_State{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Actor
	switch x := m.Actor.(type) {
	case *Event_Node:
		s := proto.Size(x.Node)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Service:
		s := proto.Size(x.Service)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_State:
		s := proto.Size(x.State)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Filters)(nil), "api.Filters")
	proto.RegisterType((*Node)(nil), "api.Node")
	proto.RegisterType((*Service)(nil), "api.Service")
	proto.RegisterType((*State)(nil), "api.State")
	proto.RegisterType((*Event)(nil), "api.Event")
	proto.RegisterEnum("api.StateValue", StateValue_name, StateValue_value)
	proto.RegisterEnum("api.EventActorType", EventActorType_name, EventActorType_value)
	proto.RegisterEnum("api.EventAction", EventAction_name, EventAction_value)
	proto.RegisterEnum("api.EventFilterKey", EventFilterKey_name, EventFilterKey_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x93, 0xdf, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0xf3, 0xb3, 0x31, 0x13, 0xcd, 0x2d, 0xa3, 0x1c, 0x41, 0x10, 0x4b, 0x40, 0x09, 0x05,
	0x0b, 0x46, 0x41, 0xd1, 0xa7, 0x4a, 0x4e, 0x5a, 0x84, 0x7b, 0xd8, 0x7a, 0xbe, 0xaf, 0xcd, 0x7a,
	0x04, 0x7b, 0x49, 0x48, 0xb6, 0x85, 0xfc, 0x03, 0xbe, 0xf8, 0x4f, 0xcb, 0xce, 0xa6, 0xad, 0x77,
	0x7d, 0xea, 0xee, 0xcc, 0x77, 0xe6, 0xfb, 0x99, 0xd9, 0x06, 0x22, 0x35, 0xb4, 0xb2, 0x9f, 0xb7,
	0x5d, 0xa3, 0x1a, 0x74, 0x45, 0x5b, 0xa5, 0x35, 0x04, 0x5f, 0xab, 0xad, 0x92, 0x5d, 0x8f, 0x33,
	0xf0, 0x16, 0xdd, 0x6d, 0x9f, 0xd8, 0x53, 0x37, 0x8b, 0xf2, 0xcb, 0xb9, 0x68, 0xab, 0xf9, 0x98,
	0x9b, 0xeb, 0xc4, 0x55, 0xad, 0xba, 0x81, 0x7b, 0xa2, 0xbb, 0xed, 0x9f, 0x7f, 0x80, 0xf0, 0x18,
	0x42, 0x06, 0xee, 0x6f, 0x39, 0x24, 0xf6, 0xd4, 0xce, 0x7c, 0xae, 0x8f, 0xf8, 0x0c, 0xfc, 0xbd,
	0xd8, 0xee, 0x64, 0xe2, 0x4c, 0xed, 0x2c, 0xe4, 0xe6, 0xf2, 0xc9, 0xf9, 0x68, 0xa7, 0x97, 0xe0,
	0x5d, 0x37, 0xa5, 0xc4, 0x18, 0x9c, 0x55, 0x41, 0x25, 0x21, 0x77, 0xaa, 0x22, 0x7d, 0x03, 0xc1,
	0x5a, 0x76, 0xfb, 0x6a, 0x73, 0x96, 0x42, 0x04, 0xef, 0x5a, 0xdc, 0x1d, 0x7a, 0x79, 0xb5, 0xb8,
	0x93, 0xe9, 0x5f, 0x1b, 0xfc, 0xb5, 0x12, 0x4a, 0xe2, 0x2b, 0xf0, 0x7f, 0x90, 0x95, 0x2e, 0x88,
	0xf3, 0x0b, 0xc2, 0xa6, 0x14, 0x85, 0x47, 0x6f, 0x4d, 0x74, 0x53, 0xab, 0x6a, 0x4b, 0x5d, 0x5c,
	0xee, 0xef, 0xf4, 0x05, 0x5f, 0x1f, 0x5d, 0x13, 0x77, 0x6a, 0x67, 0x51, 0xfe, 0xd8, 0x94, 0x9b,
	0x18, 0x0f, 0xfa, 0x11, 0xe9, 0x85, 0xa1, 0x4e, 0x3c, 0x12, 0x85, 0x24, 0xd2, 0x01, 0xee, 0xd5,
	0x4d, 0x29, 0xd3, 0x3f, 0x0e, 0xf8, 0x57, 0x7b, 0x59, 0xab, 0x33, 0xf6, 0x0c, 0x26, 0x8b, 0x8d,
	0xaa, 0x9a, 0x9a, 0x7c, 0xe3, 0x9c, 0x51, 0x29, 0x69, 0x4d, 0x9c, 0x4f, 0x04, 0xfd, 0x62, 0x02,
	0xc1, 0x62, 0xa3, 0x9a, 0x6e, 0x55, 0x10, 0x4a, 0xc8, 0x03, 0x61, 0xae, 0xf8, 0x16, 0x42, 0xca,
	0x7c, 0x1f, 0x5a, 0x43, 0x10, 0xe7, 0x4f, 0xef, 0xb5, 0x31, 0x29, 0x1e, 0x8a, 0xc3, 0x11, 0x5f,
	0x8e, 0xbc, 0xfe, 0x03, 0xde, 0xa5, 0x65, 0x88, 0x31, 0x3b, 0x0d, 0x3e, 0x39, 0x1f, 0x7c, 0x69,
	0x9d, 0x46, 0x4f, 0xc7, 0x45, 0x27, 0x01, 0xe9, 0xe0, 0xb4, 0xdf, 0xa5, 0xc5, 0xfd, 0x5e, 0x1f,
	0xbe, 0x04, 0xe0, 0x13, 0xc6, 0xec, 0x33, 0xc0, 0x69, 0xf5, 0xf8, 0x04, 0xc2, 0x9b, 0xba, 0x94,
	0xbf, 0xaa, 0x5a, 0x96, 0xcc, 0xd2, 0x57, 0x3d, 0xf3, 0x5e, 0x28, 0x59, 0x32, 0x1b, 0x2f, 0x20,
	0x2a, 0xa4, 0x38, 0x06, 0x9c, 0x59, 0x0e, 0xf1, 0xfd, 0x89, 0xf0, 0x11, 0x10, 0x2d, 0xb3, 0x30,
	0x82, 0x03, 0x10, 0xb3, 0x31, 0x04, 0xe3, 0xcb, 0x9c, 0xd9, 0x7b, 0x88, 0xfe, 0x5b, 0xa6, 0x96,
	0x6d, 0x3a, 0x49, 0xfd, 0xa8, 0x66, 0xd7, 0x96, 0xa3, 0x5b, 0x04, 0x41, 0x29, 0xb7, 0xd2, 0x38,
	0xad, 0x47, 0x27, 0xf3, 0xef, 0xfe, 0x26, 0x07, 0x84, 0xc3, 0x3b, 0x1d, 0x39, 0x0d, 0x82, 0xa9,
	0x1c, 0x1f, 0x86, 0x39, 0x5a, 0xa7, 0xf7, 0xb8, 0x2a, 0x98, 0xab, 0x75, 0xe3, 0xbe, 0x56, 0x05,
	0xf3, 0x7e, 0x4e, 0xe8, 0xab, 0x7a, 0xf7, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xb6, 0xa2, 0xd4,
	0x64, 0x03, 0x00, 0x00,
}
