// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto
	types.proto

It has these top-level messages:
	SubRequest
	SubResponse
	Filters
	Node
	Service
	State
	Event
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubRequest struct {
	Filters *Filters `protobuf:"bytes,1,opt,name=Filters,json=filters" json:"Filters,omitempty"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type SubResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=Event,json=event" json:"Event,omitempty"`
}

func (m *SubResponse) Reset()                    { *m = SubResponse{} }
func (m *SubResponse) String() string            { return proto.CompactTextString(m) }
func (*SubResponse) ProtoMessage()               {}
func (*SubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*SubRequest)(nil), "api.SubRequest")
	proto.RegisterType((*SubResponse)(nil), "api.SubResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventService service

type EventServiceClient interface {
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (EventService_SubClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (EventService_SubClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventService_serviceDesc.Streams[0], c.cc, "/api.EventService/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_SubClient interface {
	Recv() (*SubResponse, error)
	grpc.ClientStream
}

type eventServiceSubClient struct {
	grpc.ClientStream
}

func (x *eventServiceSubClient) Recv() (*SubResponse, error) {
	m := new(SubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventService service

type EventServiceServer interface {
	Sub(*SubRequest, EventService_SubServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Sub(m, &eventServiceSubServer{stream})
}

type EventService_SubServer interface {
	Send(*SubResponse) error
	grpc.ServerStream
}

type eventServiceSubServer struct {
	grpc.ServerStream
}

func (x *eventServiceSubServer) Send(m *SubResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _EventService_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0x86, 0x88, 0x28, 0x99, 0x70, 0x71, 0x05, 0x97, 0x26, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x08, 0xa9, 0x71, 0xb1, 0xbb, 0x65, 0xe6, 0x94, 0xa4, 0x16, 0x15, 0x4b, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x1b, 0xf1, 0xe8, 0x81, 0x34, 0x43, 0xc5, 0x82, 0xd8, 0xd3, 0x20, 0x0c, 0x25, 0x7d,
	0x2e, 0x6e, 0xb0, 0xae, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x05, 0x2e, 0x56, 0xd7, 0xb2,
	0xd4, 0xbc, 0x12, 0xa8, 0x26, 0x2e, 0xb0, 0x26, 0xb0, 0x48, 0x10, 0x6b, 0x2a, 0x88, 0x32, 0xb2,
	0xe2, 0xe2, 0x01, 0xf3, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xb4, 0xb8, 0x98, 0x83,
	0x4b, 0x93, 0x84, 0xf8, 0xc1, 0x2a, 0x11, 0x0e, 0x90, 0x12, 0x40, 0x08, 0x40, 0xcc, 0x36, 0x60,
	0x4c, 0x62, 0x03, 0xbb, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x09, 0x55, 0x3d, 0xc8,
	0x00, 0x00, 0x00,
}
